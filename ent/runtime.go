// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/blog"
	"entdemo/ent/schema"
	"entdemo/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	blogFields := schema.Blog{}.Fields()
	_ = blogFields
	// blogDescName is the schema descriptor for name field.
	blogDescName := blogFields[0].Descriptor()
	// blog.NameValidator is a validator for the "name" field. It is called by the builders before save.
	blog.NameValidator = blogDescName.Validators[0].(func(string) error)
	// blogDescTitle is the schema descriptor for title field.
	blogDescTitle := blogFields[1].Descriptor()
	// blog.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	blog.TitleValidator = blogDescTitle.Validators[0].(func(string) error)
	// blogDescBlogcontent is the schema descriptor for Blogcontent field.
	blogDescBlogcontent := blogFields[4].Descriptor()
	// blog.BlogcontentValidator is a validator for the "Blogcontent" field. It is called by the builders before save.
	blog.BlogcontentValidator = blogDescBlogcontent.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for Username field.
	userDescUsername := userFields[0].Descriptor()
	// user.UsernameValidator is a validator for the "Username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
}
