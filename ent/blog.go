// Code generated by ent, DO NOT EDIT.

package ent

import (
	"entdemo/ent/blog"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Blog is the model entity for the Blog schema.
type Blog struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Phonenumber holds the value of the "Phonenumber" field.
	Phonenumber int `json:"Phonenumber,omitempty"`
	// Blogcontent holds the value of the "Blogcontent" field.
	Blogcontent string `json:"Blogcontent,omitempty"`
	// Githublink holds the value of the "githublink" field.
	Githublink string `json:"githublink,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Blog) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case blog.FieldID, blog.FieldPhonenumber:
			values[i] = new(sql.NullInt64)
		case blog.FieldName, blog.FieldTitle, blog.FieldEmail, blog.FieldBlogcontent, blog.FieldGithublink:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Blog", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Blog fields.
func (b *Blog) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case blog.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case blog.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case blog.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				b.Title = value.String
			}
		case blog.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				b.Email = value.String
			}
		case blog.FieldPhonenumber:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field Phonenumber", values[i])
			} else if value.Valid {
				b.Phonenumber = int(value.Int64)
			}
		case blog.FieldBlogcontent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Blogcontent", values[i])
			} else if value.Valid {
				b.Blogcontent = value.String
			}
		case blog.FieldGithublink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field githublink", values[i])
			} else if value.Valid {
				b.Githublink = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Blog.
// Note that you need to call Blog.Unwrap() before calling this method if this Blog
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Blog) Update() *BlogUpdateOne {
	return (&BlogClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Blog entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Blog) Unwrap() *Blog {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Blog is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Blog) String() string {
	var builder strings.Builder
	builder.WriteString("Blog(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("title=")
	builder.WriteString(b.Title)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(b.Email)
	builder.WriteString(", ")
	builder.WriteString("Phonenumber=")
	builder.WriteString(fmt.Sprintf("%v", b.Phonenumber))
	builder.WriteString(", ")
	builder.WriteString("Blogcontent=")
	builder.WriteString(b.Blogcontent)
	builder.WriteString(", ")
	builder.WriteString("githublink=")
	builder.WriteString(b.Githublink)
	builder.WriteByte(')')
	return builder.String()
}

// Blogs is a parsable slice of Blog.
type Blogs []*Blog

func (b Blogs) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
